import groovy.sql.Sql

fileTree('db').each {
	apply from: "$it"
}

repositories {
    flatDir { dirs 'lib' }
}

configurations {
    driver
}

dependencies {
	driver fileTree('lib')
}

configurations.driver.each {
	GroovyObject.class.classLoader.addURL it.toURL()
}

task loadDriver << {
	Class.forName project."${db}Class"
}

task createAccounts(dependsOn: loadDriver) << {
	execute(project."${db}JdbcUrl"(dburl, port)) { sql, users, passwords, schemas ->
		for (i in 0..(schemas.size() - 1)) {
			sql.execute project."${db}CreateSchema"(schemas[i])
			println "Schema ${schemas[i]} has been created on | $db | ${dburl}:$port."

			sql.execute project."${db}CreateUser"(users[i], passwords[i])
			sql.execute project."${db}ConnectUserToSchema"(users[i], passwords[i], schemas[i])
			println "User ${users[i]} with password ${passwords[i]} has been created on | $db | ${dburl}:$port."
		}
	}
}
createAccounts.description = 'Creates DB accounts and schemas. Use comma-separated values in -Pusers= -Ppasswords= -Pschemas='

task cleanup(dependsOn: loadDriver) << {
	execute(project."${db}JdbcUrl"(dburl, port)) { sql, users, passwords, schemas ->
		for (i in 0..(schemas.size() - 1)) {
			sql.execute project."${db}DeleteUser"(users[i])
			println "User ${users[i]} has been removed on | $db | ${dburl}:$port."

			sql.execute project."${db}DeleteSchema"(schemas[i])
			println "Schema ${schemas[i]} has been removed on | $db | ${dburl}:$port."
		}
	}
}
cleanup.description = 'Removes DB accounts and schemas. Use comma-separated values in -Pusers= -Ppasswords= -Pschemas='

ext.execute = { jdbcUrl, closure ->
	def (users, passwords, schemas) = [users, pass, schemas].collect {
		it.split(',')
	}

	if ((users.size() == passwords.size()) && (users.size() == schemas.size())) {
		def sql = Sql.newInstance(jdbcUrl, admin, adminpass)
		closure(sql, users, passwords, schemas)
	} else {
		throw new GradleException('You have to pass the same count of users, passwords and schemas.')
	}
}