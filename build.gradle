import groovy.sql.Sql

repositories {
    flatDir {
        dirs 'lib'
    }
}

configurations {
    driver
}

dependencies {
	driver fileTree('lib')
}

ext {
	// jdbc urls:
	mysqlJdbcUrl = "jdbc:mysql://${dburl}:3306"
	mssqlUrl 	 = "jdbc:sqlserver://${dburl}:1433"

	// jdbc passwords:
	mysqlClass = 'com.mysql.jdbc.Driver'
	oracleClass = 'oracle.jdbc.OracleDriver'
	sqlserverClass = 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
	hanaClass = 'com.sap.db.jdbc.Driver'
}

configurations.driver.each {
	GroovyObject.class.classLoader.addURL it.toURL()
}

task loadDriver << {
	Class.forName(project."${db}Class")
}

task createAccounts(dependsOn: loadDriver) << {
	execute(project."${db}JdbcUrl") { sql, user, schema, password ->
		sql.execute project."${db}CreateUser"(user, password)
		sql.execute project."${db}CreateSchema"(schema)
		sql.execute project."${db}ConnectUserToSchema"(user, password, schema)
		println "User ${user} with password ${password} has been created for ${schema} schema on $dburl."
	}
}

task cleanup(dependsOn: loadDriver) << {
	execute(project."${db}JdbcUrl") { sql, user, schema, password ->
		sql.execute project."${db}DeleteUser"(user)
		sql.execute project."${db}DeleteSchema"(schema)
		println "User ${user} and ${schema} schema has been removed on $dburl."
	}
}

def execute(jdbcUrl, closure) {
	def users = users.split(',')
	def passwords = pass.split(',')
	def schemas = schemas.split(',')

	if ((users.size() == passwords.size()) && (users.size() == schemas.size())) {
		def sql = Sql.newInstance(jdbcUrl, admin, adminpass)

		for (i in 0..schemas.size() - 1) {
			closure(sql, users[i], passwords[i], schemas[i])
		}
	}
}

String mysqlCreateUser(user, password) {
	return "CREATE USER $user@$dburl IDENTIFIED BY '$password';"
}

String mysqlCreateSchema(schema) {
	return "CREATE DATABASE IF NOT EXISTS $schema;"
}

String mysqlConnectUserToSchema(user, password, schema) {
	return "GRANT ALL PRIVILEGES ON $schema.* TO '$user'@'$dburl';"
}

String mysqlDeleteUser(user) {
	return "DROP USER $user@$dburl;"
}

String mysqlDeleteSchema(schema) {
	return "DROP DATABASE $schema;"
}