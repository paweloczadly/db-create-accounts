import groovy.sql.Sql

apply from: 'mysql.gradle'
apply from: 'sqlserver.gradle'

repositories {
    flatDir { dirs 'lib' }
}

configurations {
    driver
}

dependencies {
	driver fileTree('lib')
}

ext {
	// jdbc urls:
	mysqlJdbcUrl 		= "jdbc:mysql://${dburl}:${port}"
	sqlserverJdbcUrl 	= "jdbc:sqlserver://${dburl}:${port}"

	// jdbc passwords:
	mysqlClass 			= 'com.mysql.jdbc.Driver'
	oracleClass 		= 'oracle.jdbc.OracleDriver'
	sqlserverClass 		= 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
	hanaClass 			= 'com.sap.db.jdbc.Driver'
}

configurations.driver.each {
	GroovyObject.class.classLoader.addURL it.toURL()
}

task loadDriver << {
	Class.forName(project."${db}Class")
}

task createAccounts(dependsOn: loadDriver) << {
	execute(project."${db}JdbcUrl") { sql, user, password, schema ->
		sql.execute project."${db}CreateSchema"(schema)
		println "Schema $schema has been created on | $db | ${dburl}:$port."

		sql.execute project."${db}CreateUser"(user, password)
		sql.execute project."${db}ConnectUserToSchema"(user, password, schema)
		println "User $user with password $password has been created on | $db | ${dburl}:$port."
	}
}

task cleanup(dependsOn: loadDriver) << {
	execute(project."${db}JdbcUrl") { sql, user, password, schema ->
		sql.execute project."${db}DeleteUser"(user)
		println "User $user has been removed on | $db | ${dburl}:$port."

		sql.execute project."${db}DeleteSchema"(schema)
		println "Schema $schema has been removed on | $db | ${dburl}:$port."
	}
}

def execute(jdbcUrl, closure) {
	def users = users.split(',')
	def passwords = pass.split(',')
	def schemas = schemas.split(',')

	if ((users.size() == passwords.size()) && (users.size() == schemas.size())) {
		def sql = Sql.newInstance(jdbcUrl, admin, adminpass)
		for (i in 0..schemas.size() - 1) {
			closure(sql, users[i], passwords[i], schemas[i])
		}
	} else {
		throw new GradleException('You have to pass the same count of users, passwords and schemas.')
	}
}